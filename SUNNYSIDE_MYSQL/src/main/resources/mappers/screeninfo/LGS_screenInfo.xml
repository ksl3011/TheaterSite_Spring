<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="screeninfo">
	
	<!-- 검색어 -->
	<sql id="baseCondition">
	<where>
		<choose>
			<when test="'10' == searchDiv">
				MOVIE_ID LIKE CONCAT('%' , #{searchWord} , '%')
				AND (<![CDATA[@rownum]]>:=0)=0
			</when>
			<when test="'20' == searchDiv">
				 ROOM_ID LIKE CONCAT('%' , #{searchWord} , '%')
				 AND (<![CDATA[@rownum]]>:=0)=0
			</when>
			<when test="'30' == searchDiv">
				 DATE_FORMAT(SCREEN_DT, '%Y-%m-%d') = DATE_FORMAT(NOW(), '%Y-%m-%d')
				AND ROOM_ID LIKE CONCAT('%' , #{searchWord} , '%')
				AND (<![CDATA[@rownum]]>:=0)=0
			</when>
			<when test="'40' == searchDiv">
				 DATE_FORMAT(SCREEN_DT, '%Y-%m-%d') = #{searchWord_second, jdbcType=VARCHAR}
				AND MOVIE_ID LIKE CONCAT('%' , #{searchWord} , '%')
				AND (<![CDATA[@rownum]]>:=0)=0
			</when>
			<when test="'50' == searchDiv">
				 MOVIE_ID LIKE CONCAT('%' , #{searchWord} , '%')
				 AND (<![CDATA[@rownum]]>:=0)=0
			</when>
			<when test="'60' == searchDiv">
				 SCREEN_ID LIKE CONCAT('%' , #{searchWord} , '%')
				 AND (<![CDATA[@rownum]]>:=0)=0
			</when>
			<otherwise>(<![CDATA[@rownum]]>:=0)=0</otherwise>
		</choose>
	</where>
	</sql>
	 
	<delete id="do_delete" parameterType="ScreenInfo">
		DELETE FROM SCREEN_INFO WHERE SCREEN_ID = #{screenId, jdbcType=VARCHAR}
	</delete>
	
	<select id="do_selectOne" parameterType="ScreenInfo" resultType="ScreenInfo">
		SELECT
		    SCREEN_ID as screenId,
		    ROOM_ID as roomId,
		    BRANCH_ID as branchId,
		    MOVIE_ID movieId,
		    DATE_FORMAT(START_TIME, '%Y-%m-%d %H:%i:%s') as startTime,
			DATE_FORMAT(END_TIME, '%Y-%m-%d %H:%i:%s') as endTime,
			DATE_FORMAT(SCREEN_DT, '%Y-%m-%d %H:%i:%s') as screenDt,
		    ADULT_COST as adultCost,
		    STUDENT_COST as studentCost,
		    EPISODE as episode
		FROM
		    SCREEN_INFO
		WHERE
		    SCREEN_ID = #{screenId, jdbcType=VARCHAR}
	</select>
	 
	<insert id="do_save" parameterType="ScreenInfo">
		<selectKey keyProperty="screenId" resultType="string" order="BEFORE">
			SELECT SUBSTR(CONCAT(MD5(RAND()),MD5(RAND())),1,15) FROM DUAL
		</selectKey>
		INSERT INTO SCREEN_INFO (
		    SCREEN_ID,
		    ROOM_ID,
		    BRANCH_ID,
		    MOVIE_ID,
		    START_TIME,
		    END_TIME,
		    SCREEN_DT,
		    ADULT_COST,
		    STUDENT_COST,
		    EPISODE
		) VALUES (
			#{screenId},
		    #{roomId, jdbcType=VARCHAR},
		    #{branchId, jdbcType=VARCHAR},
		    #{movieId, jdbcType=VARCHAR},
		    DATE_FORMAT(#{startTime, jdbcType=VARCHAR}, '%Y-%m-%d %H:%i:%s'),
		    DATE_FORMAT(#{endTime, jdbcType=VARCHAR}, '%Y-%m-%d %H:%i:%s'),
		    DATE_FORMAT(#{screenDt, jdbcType=VARCHAR}, '%Y-%m-%d %H:%i:%s'),
		    #{adultCost, jdbcType=NUMERIC},
		    #{studentCost, jdbcType=NUMERIC},
		    (
			SELECT (
			        SELECT COUNT(SCREEN_DT)
			        FROM SCREEN_INFO as tmp
			        WHERE SCREEN_DT = DATE_FORMAT(#{screenDt, jdbcType=VARCHAR},'%Y-%m-%d')
			        AND ROOM_ID = #{roomId, jdbcType=VARCHAR}
			        )
			FROM DUAL
			)+1
		)
	</insert>
	
	<update id="do_update" parameterType="ScreenInfo">
		UPDATE SCREEN_INFO
		SET
			ROOM_ID = #{roomId, jdbcType=VARCHAR},
			BRANCH_ID = #{branchId, jdbcType=VARCHAR},
			MOVIE_ID = #{movieId, jdbcType=VARCHAR},
			START_TIME = DATE_FORMAT(#{startTime, jdbcType=VARCHAR}, '%Y-%m-%d %H:%i:%s'),
			END_TIME = DATE_FORMAT(#{endTime, jdbcType=VARCHAR}, '%Y-%m-%d %H:%i:%s'),
			SCREEN_DT = DATE_FORMAT(#{screenDt, jdbcType=VARCHAR}, '%Y-%m-%d %H:%i:%s'),
			ADULT_COST = #{adultCost, jdbcType=NUMERIC},
			STUDENT_COST = #{studentCost, jdbcType=NUMERIC},
			EPISODE = #{episode, jdbcType=NUMERIC}
		WHERE
			screen_id = #{screenId, jdbcType=VARCHAR}
	</update>
	
	<select id="do_retrieve" parameterType="Search" resultType="ScreenInfo">
		SELECT B1.*, B2.roomNm
		FROM(
			SELECT A1.*, A2.*
			FROM(
				SELECT T1.RNUM as num
				      ,T1.SCREEN_ID as screenId
					  ,T1.ROOM_ID as roomId
					  ,T1.BRANCH_ID as branchId
					  ,T1.MOVIE_ID as movieId
					  ,DATE_FORMAT(T1.START_TIME, '%Y-%m-%d %H:%i:%s') as startTime
					  ,DATE_FORMAT(T1.END_TIME, '%Y-%m-%d %H:%i:%s') as endTime
					  ,DATE_FORMAT(T1.SCREEN_DT, '%Y-%m-%d %H:%i:%s') as screenDt
					  ,T1.ADULT_COST as adultCost
					  ,T1.STUDENT_COST as studentCost
					  ,T1.EPISODE as episode
				      ,T2.KORTITLE as korTitle
				      ,T2.ENGTITLE as engTitle
				      ,T2.EXPERT_RATE as expertRate
				      ,T2.VISITOR_RATE as visitorRate
				FROM(
				    SELECT <![CDATA[@rownum]]>:=<![CDATA[@rownum]]>+1 AS RNUM, A.*
				    FROM(
				         SELECT *
				         FROM SCREEN_INFO
				         <include refid="baseCondition"/>
				         ORDER BY SCREEN_DT DESC, EPISODE DESC
				        )A
				    )T1 RIGHT JOIN
				    (
				    SELECT *
				    FROM MOVIE
				    )T2
				ON T1.MOVIE_ID = T2.MOVIE_ID
				WHERE CEIL(T1.RNUM/ #{pageSize, jdbcType=VARCHAR} ) = #{pageNum, jdbcType=VARCHAR}
			)A1
			
	     	NATURAL JOIN                                                      
	     	(                                                                 
	         SELECT COUNT(*) as totalCnt                                     
	         FROM SCREEN_INFO                                   
	          <include refid="baseCondition"/>                                           
	     	)A2
			)B1,
			(
			SELECT ROOM_ID as roomId
                  ,ROOM_Nm as roomNm
			FROM ROOM
			)B2
			WHERE B1.roomId = B2.roomid
	</select>

	<select id="do_retrieve_forUser" parameterType="Search" resultType="ScreenInfo">
		SELECT DISTINCT movieId, korTitle
		FROM(
			SELECT T1.RNUM as num
			      ,T1.SCREEN_ID as screenId
				  ,T1.ROOM_ID as roomId
				  ,T1.BRANCH_ID as branchId
				  ,T1.MOVIE_ID as movieId
				  ,DATE_FORMAT(T1.START_TIME, '%Y-%m-%d %H:%i:%s') as startTime
				  ,DATE_FORMAT(T1.END_TIME, '%Y-%m-%d %H:%i:%s') as endTime
				  ,DATE_FORMAT(T1.SCREEN_DT, '%Y-%m-%d %H:%i:%s') as screenDt
				  ,T1.ADULT_COST as adultCost
				  ,T1.STUDENT_COST as studentCost
				  ,T1.EPISODE as episode
			      ,T2.KORTITLE as korTitle
			      ,T2.ENGTITLE as engTitle
			      ,T2.EXPERT_RATE as expertRate
			      ,T2.VISITOR_RATE as visitorRate
			FROM(
			    SELECT  <![CDATA[@rownum]]>:=<![CDATA[@rownum]]>+1 AS RNUM, A.*
			    FROM(
			         SELECT *
			         FROM SCREEN_INFO
			         WHERE START_TIME <![CDATA[>]]> NOW()
					 AND SCREEN_DT <![CDATA[<=]]> DATE_ADD(NOW(), INTERVAL 14 DAY)
			         ORDER BY SCREEN_DT DESC, EPISODE DESC
			        )A
			    )T1 RIGHT JOIN
			    (
			    SELECT *
			    FROM MOVIE
			    )T2
			ON T1.MOVIE_ID = T2.MOVIE_ID
			WHERE CEIL(T1.RNUM/ #{pageSize, jdbcType=VARCHAR} ) = #{pageNum, jdbcType=VARCHAR}
			AND (<![CDATA[@rownum]]>:=0)=0
			ORDER BY KORTITLE ASC
		)T
	</select>
	
	<select id="do_retrieve_branch" parameterType="Search" resultType="BranchInfo">
		SELECT DISTINCT branchId
						,branchNm
		FROM(
			SELECT T1.RNUM as num
			      ,T1.SCREEN_ID as screenId
				  ,T1.ROOM_ID as roomId
				  ,T1.BRANCH_ID as branchId
				  ,T1.MOVIE_ID as movieId
				  ,DATE_FORMAT(T1.START_TIME, '%Y-%m-%d %H:%i:%s') as startTime
				  ,DATE_FORMAT(T1.END_TIME, '%Y-%m-%d %H:%i:%s') as endTime
				  ,DATE_FORMAT(T1.SCREEN_DT, '%Y-%m-%d %H:%i:%s') as screenDt
				  ,T1.ADULT_COST as adultCost
				  ,T1.STUDENT_COST as studentCost
				  ,T1.EPISODE as episode
			      ,T2.KORTITLE as korTitle
			      ,T2.ENGTITLE as engTitle
			      ,T2.EXPERT_RATE as expertRate
			      ,T2.VISITOR_RATE as visitorRate
			FROM(
			    SELECT <![CDATA[@rownum]]>:=<![CDATA[@rownum]]>+1 AS RNUM, A.*
			    FROM(
			         SELECT *
			         FROM SCREEN_INFO
			         WHERE MOVIE_ID = #{searchWord, jdbcType=VARCHAR}
			         AND (<![CDATA[@rownum]]>:=0)=0
			         AND START_TIME <![CDATA[>]]> NOW()
					 AND SCREEN_DT <![CDATA[<=]]> DATE_ADD(NOW(), INTERVAL 14 DAY)
			        )A
			    )T1 RIGHT JOIN
			    (
			    SELECT *
			    FROM MOVIE
			    )T2
			ON T1.MOVIE_ID = T2.MOVIE_ID
			WHERE CEIL(T1.RNUM/ #{pageSize, jdbcType=VARCHAR} ) = #{pageNum, jdbcType=VARCHAR}
		)A1,
		(
		SELECT BRANCH_ID, BRANCH_NM as branchNm
		FROM BRANCH_INFO
		)A2,
		(
		SELECT ROOM_ID, ROOM_NM as roomNm
		FROM ROOM
		)A3
		WHERE A1.branchId = A2.BRANCH_ID
		AND A1.roomId = A3.ROOM_ID
	</select>

</mapper>